// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WebServiceDbContext))]
    [Migration("20250624115808_ClientsPurchasesProducts")]
    partial class ClientsPurchasesProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.Client.ClientAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("second_name");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1980, 7, 31),
                            FirstName = "Гаррі",
                            LastName = "Потеренко",
                            RegistrationDate = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            SecondName = "Джеймсевіч"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateOnly(1980, 6, 5),
                            FirstName = "Драко",
                            LastName = "Малфоєнко",
                            RegistrationDate = new DateTime(2024, 2, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            SecondName = "Луціюсевіч"
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Product.ProductAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sku");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            Name = "Laptop Lenovo",
                            Price = 2500m,
                            SKU = "SKU123"
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            Name = "CellPhone Samsung",
                            Price = 1800m,
                            SKU = "SKU456"
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            Name = "Ipad",
                            Price = 2000m,
                            SKU = "M4"
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Purchase.PurchaseAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Purchases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Date = new DateTime(2024, 3, 9, 22, 0, 0, 0, DateTimeKind.Utc),
                            Number = "0503002010",
                            TotalAmount = 3500m
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Date = new DateTime(2024, 4, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Number = "0503002011",
                            TotalAmount = 2000m
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Purchase.PurchaseItemAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            PurchaseId = 1,
                            Quantity = 1,
                            UnitPrice = 2500m
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            PurchaseId = 1,
                            Quantity = 1,
                            UnitPrice = 1000m
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            PurchaseId = 2,
                            Quantity = 1,
                            UnitPrice = 2000m
                        });
                });

            modelBuilder.Entity("Domain.Aggregates.Purchase.PurchaseAggregate", b =>
                {
                    b.HasOne("Domain.Aggregates.Client.ClientAggregate", "Client")
                        .WithMany("Purchases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Aggregates.Purchase.PurchaseItemAggregate", b =>
                {
                    b.HasOne("Domain.Aggregates.Product.ProductAggregate", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Purchase.PurchaseAggregate", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Aggregates.Client.ClientAggregate", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Domain.Aggregates.Product.ProductAggregate", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("Domain.Aggregates.Purchase.PurchaseAggregate", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
